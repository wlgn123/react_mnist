{"version":3,"sources":["module/mnist/CanvasDraw.js","module/mnist/TfjsMnist.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["CanvasDraw","pos","X","Y","drawable","componentDidMount","_this","canvas","document","getElementById","ctx","getContext","lineWidth","props","strokeStyle","color","addEventListener","_listener","removeBtnObj","_clear","event","type","_initDraw","_draw","_finishDraw","beginPath","_getPosition","lineCap","lineJoin","moveTo","lineTo","stroke","pageX","offsetLeft","pageY","offsetTop","clearRect","width","height","render","react_default","a","createElement","className","id","Component","defaultProps","MNIST","state","predict","_initModel","_predictMNIST","_callee","input","output","result","regenerator_default","wrap","_context","prev","next","_getCanvasGrayImageTensor","model","argMax","dataSync","setState","stop","_callee2","_context2","tf","sent","draw","imgData","getImageData","fromPixels","resizeNearestNeighbor","toFloat","mean","div","reshape","module_mnist_CanvasDraw","ref","onClick","App","src","logo","alt","mnist_TfjsMnist","Boolean","window","location","hostname","match","ReactDOM","src_App","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.52997f26.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './CanvasDraw.css'\r\n\r\nclass CanvasDraw extends Component  {\r\n    pos = {X:-1, Y: -1};\r\n    drawable = false;\r\n\r\n    static defaultProps = {\r\n        width: 300,\r\n        height: 300,\r\n        removeBtnObj: null,\r\n        lineWidth: 10,\r\n        color: '#444444'\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.canvas = document.getElementById(\"canvasDraw\");\r\n        this.ctx = this.canvas.getContext(\"2d\");\r\n\r\n        this.ctx.lineWidth = this.props.lineWidth;\r\n        this.ctx.strokeStyle = this.props.color;\r\n\r\n        this.canvas.addEventListener(\"mousedown\", this._listener);\r\n        this.canvas.addEventListener(\"mousemove\", this._listener);\r\n        this.canvas.addEventListener(\"mouseout\",  this._listener);\r\n        this.canvas.addEventListener(\"mouseup\",   this._listener);\r\n\r\n        if(this.props.removeBtnObj) {\r\n            const clearBtn = document.getElementById(this.props.removeBtnObj);\r\n            clearBtn.addEventListener(\"click\", this._clear);\r\n        }\r\n    }\r\n\r\n    _listener = (event) => {\r\n        switch(event.type) {\r\n            case \"mousedown\":\r\n                this._initDraw(event);\r\n                break;\r\n            case \"mousemove\":\r\n                if(this.drawable)\r\n                    this._draw(event);\r\n                break;\r\n            case \"mouseout\":\r\n            case \"mouseup\":\r\n                this._finishDraw();\r\n                break;\r\n        }\r\n    }\r\n\r\n    _initDraw = (event) => {\r\n        this.ctx.beginPath();\r\n        this.drawable = true;\r\n        this.pos = this._getPosition(event);\r\n\r\n        this.ctx.lineCap = \"round\";\r\n        this.ctx.lineJoin = \"round\";\r\n        this.ctx.moveTo(this.pos.X, this.pos.Y);\r\n    }\r\n\r\n    _draw = (event) => {\r\n        this.pos = this._getPosition(event);\r\n        this.ctx.lineTo(this.pos.X, this.pos.Y);\r\n        \r\n        this.ctx.stroke();\r\n    }\r\n\r\n    _finishDraw = () => {\r\n        this.drawable = false;\r\n        this.pos.X = -1;\r\n        this.pos.Y = -1;\r\n    }\r\n\r\n    _getPosition = (event) => {\r\n        let x = event.pageX - this.canvas.offsetLeft;\r\n        let y = event.pageY - this.canvas.offsetTop;\r\n        \r\n        return {X: x, Y: y};\r\n    }\r\n\r\n    _clear = () => {\r\n        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\r\n        this.ctx.beginPath();\r\n    }\r\n\r\n    render = () => {\r\n        return (\r\n            <canvas className=\"canvas-draw\" id=\"canvasDraw\" width={this.props.width} height={this.props.height}>\r\n            </canvas>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CanvasDraw;","import React,{Component} from 'react';\r\nimport CanvasDraw from './CanvasDraw'\r\n\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport { fromPixels } from '@tensorflow/tfjs-core/dist/ops/browser';\r\n\r\nimport './TfjsMnist.css';\r\n\r\nclass MNIST extends Component {\r\n    static defaultProps = {\r\n\r\n    }\r\n\r\n    state = {\r\n        predict: ''\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this._initModel();\r\n    }\r\n\r\n    _predictMNIST = async () => {\r\n        let input = this._getCanvasGrayImageTensor();\r\n        let output = this.model.predict(input);\r\n\r\n        const result = output.argMax(1).dataSync()[0];\r\n\r\n        this.setState({\r\n            predict: result\r\n        });\r\n    }\r\n\r\n    _initModel = async () => {\r\n        this.model = await tf.loadLayersModel('mnistmodel2/model.json');\r\n    }\r\n\r\n    _getCanvasGrayImageTensor = () => {\r\n        const ctx = this.draw.ctx;\r\n        let imgData = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n\r\n        let imgTensor = fromPixels(imgData)\r\n            .resizeNearestNeighbor([28, 28])\r\n            .toFloat()\r\n            .mean(2)\r\n            .div(255)\r\n            .reshape([1, 28, 28, 1]);\r\n\r\n        return imgTensor;\r\n    }\r\n\r\n    render = () => {\r\n        return (\r\n            <div className='mnist-wrapper'>\r\n                <h2 className='mnist-title'>TF-JS MNIST <br/> 0 ~ 9 숫자를 그려주세요 </h2>\r\n                <h2 className='mnist-predict'>\r\n                    {this.state.predict===''?'':\"NUMBER IS : \" + this.state.predict}\r\n                </h2>\r\n                <div className='mnist-drawbox'>\r\n                    <CanvasDraw \r\n                        width={200} \r\n                        height={200} \r\n                        removeBtnObj=\"clearBtn\"\r\n                        ref = {(ref)=>{this.draw = ref}}\r\n                    />\r\n                </div>\r\n                <div className='mnist-btnBox'>\r\n                    <button id=\"clearBtn\" className=\"mnist-btn\">CLEAR</button>\r\n                    <button className=\"mnist-btn\" onClick={this._predictMNIST}>PREDICT</button>\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MNIST;","import React from 'react';\r\nimport logo from './logo.svg';\r\n\r\nimport MNIST from './module/mnist/TfjsMnist';\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n      </header>\r\n      <MNIST />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";"],"sourceRoot":""}